{
  "modal": {
    "scope": "typescript",
    "prefix": "$modal",
    "body": [
      "import { ModalSubmitInteraction } from 'discord.js';",
      "",
      "import { CoreModal } from '@typings/core';",
      "import { ExtendedClient } from 'src/client';",
      "",
      "const modal: CoreModal<ExtendedClient> = {",
      "  id: 'modal-id',",
      "  description: 'Modal description',",
      "  /**",
      "   * The function that is executed when the modal is submitted.",
      "   * @param client The extended client.",
      "   * @param interaction The modal interaction.",
      "   * @param args The arguments passed to the modal.",
      "   * @returns A promise that resolves to an unknown value.",
      "   */",
      "  async execute(client: ExtendedClient, interaction: ModalSubmitInteraction, args: string[]): Promise<unknown> {",
      "    const firstArgument = args[0];",
      "",
      "    await interaction.reply({",
      "      content: `Modal submitted! \\${firstArgument}`,",
      "    });",
      "",
      "    return 'anything';",
      "  },",
      "};",
      "",
      "export default modal;",
    ],
    "description": "Modal file"
  },
  "interface": {
    "scope": "typescript",
    "prefix": "$interface",
    "body": [
      "import { ActionRowBuilder, ButtonBuilder, EmbedBuilder } from 'discord.js';",
      "",
      "import { CoreInterface } from '@typings/core';",
      "",
      "/**",
      " * The function return the default interface.",
      " * @param client The extended client.",
      " * @param guildProfile The guild profile.",
      " * @returns An object containing the embed and buttons.",
      " */",
      "export default <CoreInterface>((client, guildProfile) => {",
      "\tconst translations = client.translations[guildProfile.language];",
      "",
      "\tconst embed = new EmbedBuilder().setDescription(translations.name);",
      "",
      "\tconst row = new ActionRowBuilder<ButtonBuilder>();",
      "",
      "\treturn {",
      "\t\tembeds: [embed],",
      "\t\tbuttons: [row],",
      "\t};",
      "});",
      ""
    ],
    "description": "Interface snippet"
  },
  "event": {
    "scope": "typescript",
    "prefix": "$event",
    "body": [
      "import { Events } from 'discord.js';",
      "",
      "import { CoreEvent } from '@typings/core';",
      "",
      "export default <CoreEvent>{",
      "\tname: Events.ClientReady,",
      "\t/**",
      "\t * Execute the event.",
      "\t * @param client The extended client.",
      "\t */",
      "\texecute(client) {},",
      "};",
      ""
    ],
    "description": "Event snippet"
  },
  "button": {
    "scope": "typescript",
    "prefix": "$button",
    "body": [
      "import { ButtonInteraction } from 'discord.js';",
      "",
      "import { CoreButton } from '@typings/core';",
      "",
      "export default <CoreButton>{",
      "\tid: 'button-id',",
      "\tdescription: 'Button description',",
      "\tperUser: false,",
      "\t/**",
      "\t * The function that is executed when the button is pressed.",
      "\t * @param client The extended client.",
      "\t * @param interaction The button interaction.",
      "\t * @param args The arguments passed to the button.",
      "\t * @returns A promise that resolves to an unknown value.",
      "\t */",
      "\texecute: async (client, interaction: ButtonInteraction, args: string[]) => {",
      "\t\tconst firstArgument = args[1];",
      "",
      "\t\tawait interaction.reply(`Button pressed! \\${firstArgument}`);",
      "",
      "\t\treturn 'anything';",
      "\t},",
      "};",
      ""
    ],
    "description": "Button snippet"
  }
}